package memstore.table;
import it.unimi.dsi.fastutil.ints.IntArrayList;
import memstore.data.ByteFormat;
import memstore.data.DataLoader;
import sun.jvm.hotspot.utilities.IntArray;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import java.util.HashMap;

/**
 * Custom table implementation to adapt to provided query mix.
 */
public class CustomTable implements Table {
    int numCols;
    int numRows;
    private HashMap<Integer, IntArrayList> index_col_zero;
    private HashMap<Integer, IntArrayList> index_col_one;
    private HashMap<Integer, IntArrayList> index_col_two;
    ByteBuffer row_store_rows;
    ByteBuffer column_store_columns;
    public CustomTable() { }

    public void load(DataLoader loader) throws IOException {

        /*
        * Row Store
        *================================================================================================================
        *================================================================================================================
        */
        this.numCols = loader.getNumCols();
        List<ByteBuffer> row_store_rows = loader.getRows();
        numRows = row_store_rows.size();
        this.row_store_rows = ByteBuffer.allocate(ByteFormat.FIELD_LEN * numRows * numCols);

        for (int rowId = 0; rowId < numRows; rowId++) {
            ByteBuffer curRow = row_store_rows.get(rowId);
            for (int colId = 0; colId < numCols; colId++) {
                int offset = ByteFormat.FIELD_LEN * ((rowId * numCols) + colId);
                this.row_store_rows.putInt(offset, curRow.getInt(ByteFormat.FIELD_LEN * colId));
            }
        }
        /*
         * Row Store
         *================================================================================================================
         *================================================================================================================
         */

        /*
         * Column Store
         *================================================================================================================
         *================================================================================================================
         */

        List<ByteBuffer> column_store_rows = loader.getRows();
        numRows = column_store_rows.size();
        this.column_store_columns = ByteBuffer.allocate(ByteFormat.FIELD_LEN*numRows*numCols);

        for (int rowId = 0; rowId < numRows; rowId++) {
            ByteBuffer curRow = column_store_rows.get(rowId);
            for (int colId = 0; colId < numCols; colId++) {
                int offset = ByteFormat.FIELD_LEN * ((colId * numRows) + rowId);
                this.column_store_columns.putInt(offset, curRow.getInt(ByteFormat.FIELD_LEN*colId));
            }
        }

        /*
         * Column Store
         *================================================================================================================
         *================================================================================================================
         */

        /*
         * Index on column 0
         *================================================================================================================
         *================================================================================================================
         */

        index_col_zero = new HashMap<Integer, IntArrayList>();

        for (int rowId = 0; rowId < numRows; rowId++){
            int elem = getIntField(rowId, 0);
            if(index_col_zero.containsKey(elem)){
                IntArrayList list = index_col_zero.get(elem);
                list.add(rowId);
            } else{
                IntArrayList newlist = new IntArrayList();
                newlist.add(rowId);
                index_col_zero.put(elem, newlist);
            }
        }

        /*
         * Index on column 0
         *================================================================================================================
         *================================================================================================================
         */

        /*
         * Index on column 1
         *================================================================================================================
         *================================================================================================================
         */

        index_col_one = new HashMap<Integer, IntArrayList>();

        for (int rowId = 0; rowId < numRows; rowId++){
            int elem = getIntField(rowId, 1);
            if(index_col_one.containsKey(elem)){
                IntArrayList list = index_col_one.get(elem);
                list.add(rowId);
            } else{
                IntArrayList newlist = new IntArrayList();
                newlist.add(rowId);
                index_col_one.put(elem, newlist);
            }
        }

        /*
         * Index on column 1
         *================================================================================================================
         *================================================================================================================
         */

        /*
         * Index on column 2
         *================================================================================================================
         *================================================================================================================
         */

        index_col_two = new HashMap<Integer, IntArrayList>();

        for (int rowId = 0; rowId < numRows; rowId++){
            int elem = getIntField(rowId, 2);
            if(index_col_two.containsKey(elem)){
                IntArrayList list = index_col_two.get(elem);
                list.add(rowId);
            } else{
                IntArrayList newlist = new IntArrayList();
                newlist.add(rowId);
                index_col_two.put(elem, newlist);
            }
        }

        /*
         * Index on column 2
         *================================================================================================================
         *================================================================================================================
         */

    }

    /**
     *
     * Returns the int field at row `rowId` and column `colId`.
     */
    @Override
    public int getIntField(int rowId, int colId) {
        int offset = ByteFormat.FIELD_LEN * ((rowId * numCols) + colId);
        //int offset = ByteFormat.FIELD_LEN * ((colId * numRows) + rowId);
        //return column_store_columns.getInt(offset);
        return row_store_rows.getInt(offset);
    }

    /**
     * Inserts the passed-in int field at row `rowId` and column `colId`.
     */
    @Override
    public void putIntField(int rowId, int colId, int field) {

        //Gets the initial value before changes
        int was = getIntField(rowId, colId);
        //Makes changes
        int offset = ByteFormat.FIELD_LEN * ((rowId * numCols) + colId);
        row_store_rows.putInt(offset, field);
        //Updates index to reflect chagnes
        if(colId == 0){

            IntArrayList old_index_arr = index_col_zero.get(was);
            old_index_arr.rem(rowId);

            if(index_col_zero.containsKey(field)){
                IntArrayList list = index_col_zero.get(field);
                list.add(rowId);
            } else{
                IntArrayList newlist = new IntArrayList();
                newlist.add(rowId);
                index_col_zero.put(field, newlist);
            }
        }

        if(colId == 1){

            IntArrayList old_index_arr = index_col_one.get(was);
            old_index_arr.rem(rowId);

            if(index_col_one.containsKey(field)){
                IntArrayList list = index_col_one.get(field);
                list.add(rowId);
            } else{
                IntArrayList newlist = new IntArrayList();
                newlist.add(rowId);
                index_col_one.put(field, newlist);
            }
        }

        if(colId == 2){

            IntArrayList old_index_arr = index_col_two.get(was);
            old_index_arr.rem(rowId);

            if(index_col_two.containsKey(field)){
                IntArrayList list = index_col_two.get(field);
                list.add(rowId);
            } else{
                IntArrayList newlist = new IntArrayList();
                newlist.add(rowId);
                index_col_two.put(field, newlist);
            }
        }


    }

    /**
     * Implements the query
     *  SELECT SUM(col0) FROM table;
     *
     *  Returns the sum of all elements in the first column of the table.
     */
    @Override
    public long columnSum() {
        long sum = 0;
        Set<Integer> keys = index_col_zero.keySet();
        for(int elem : keys){
                sum = sum +  index_col_zero.get(elem).size() * elem ;
        }
        return sum;
    }

    /**
     * Implements the query
     *  SELECT SUM(col0) FROM table WHERE col1 > threshold1 AND col2 < threshold2;
     *
     *  Returns the sum of all elements in the first column of the table,
     *  subject to the passed-in predicates.
     */
    @Override
    public long predicatedColumnSum(int threshold1, int threshold2){

    /**
     * Implements the query
     *  SELECT SUM(col0) + SUM(col1) + ... + SUM(coln) FROM table WHERE col0 > threshold;
     *{
     *         long sum = 0;
     *
     *         Set<Integer> keys = index_col_one.keySet();
     *         //comparing against threshold 1
     *         for(int elem : keys){
     *             if(elem > threshold1){
     *                 // if so, iterate over the row indices for which that holds and compare col2 with threshold 2
     *                 IntArrayList arr = index_col_one.get(elem);
     *                 int len = arr.size();
     *                 for(int i = 0; i < len; i++){
     *                     if(getIntField(arr.getInt(i), 2) < threshold2){
     *                         sum  = sum + getIntField(arr.getInt(i), 0) ;
     *                     }
     *                 }
     *             }
     *         }
     *         return sum;
     *     }
     *
     *
     *     Working method
     *
     *
     *     {
     *         // TODO: Implement this!
     *         long sum = 0;
     *
     *         for (int rowId = 0; rowId < numRows; rowId++) {
     *             if (getIntField(rowId,1) > threshold1)
     *             {
     *                 if (getIntField(rowId,2) < threshold2){
     *                     sum = sum + getIntField(rowId,0);
     *                 }
     *             }
     *
     *         }
     *         // TODO : Done
     *
     *         return sum;
     *     }
     *  Returns the sum of all elements in the rows which pass the predicate.
     */


              long sum = 0;

              Set<Integer> keys = index_col_one.keySet();
              //comparing against threshold 1
              for(int elem : keys){
                  if(elem > threshold1){
                      // if so, iterate over the row indices for which that holds and compare col2 with threshold 2
                      IntArrayList arr = index_col_one.get(elem);
                      int len = arr.size();
                      for(int i = 0; i < len; i++){
                          if(getIntField(arr.getInt(i), 2) < threshold2){
                              sum  = sum + getIntField(arr.getInt(i), 0) ;
                         }
                      }
                  }
              }
              return sum;
          }





    /**
     * Implements the query
     *  SELECT SUM(col0) + SUM(col1) + ... + SUM(coln) FROM table WHERE col0 > threshold;
     *
     *  Returns the sum of all elements in the rows which pass the predicate.
     */
    @Override
    public long predicatedAllColumnsSum(int threshold) {
        // TODO: Implement this!

        long sum = 0;
        for (int rowId = 0; rowId < numRows; rowId++) {
            for (int colId = 0; colId < numCols; colId++) {
                if (getIntField(rowId, 0) > threshold){
                    sum = sum + getIntField(rowId,colId);
                }
            }
        }
        // TODO : Done
        return sum;
    }

    /**
     * Implements the query
     *   UPDATE(col3 = col3 + col2) WHERE col0 < threshold;
     *
     *
     *   Returns the number of rows updated.
     *
     *
     *   Working method:
     *   {
     *
     *         int count = 0;
     *         for (int rowId = 0; rowId < numRows; rowId++) {
     *
     *             if(getIntField(rowId, 0) < threshold){
     *                 int field = getIntField(rowId, 3) + getIntField(rowId, 2);
     *                 putIntField(rowId, 3, field);
     *                 count = count + 1;
     *             }
     *         }
     *         return count;
     *     }
     */
    @Override
    public int predicatedUpdate(int threshold) {
        int count = 0;
        Set<Integer> keys = index_col_zero.keySet();
        //comparing against threshold
        for(int elem : keys){
            if(elem < threshold){
                // if so, iterate over the row indices for which that holds
                IntArrayList arr = index_col_zero.get(elem);
                for(int i = 0; i < arr.size(); i++){
                    int rowId = arr.getInt(i);
                    int field = getIntField(rowId, 3) + getIntField(rowId, 2);
                    putIntField(rowId, 3, field);
                    count = count + 1;
                }
            }
        }
        return count;
    }
}
